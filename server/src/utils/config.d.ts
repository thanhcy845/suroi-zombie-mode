/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ConfigSchema {
  $schema: string;
  /**
   * The hostname to host the server on.
   */
  hostname: string;
  /**
   * The port to host the server on.
   * The main server is hosted on the specified port, while game servers are hosted on the ports following it.
   * For example, if it's 8000, the main server is hosted on port 8000, the first game server is on 8001, the second is on 8002, and so on.
   */
  port: number;
  /**
   * The map name, or a schedule to switch between maps. Must be a valid value from the server map definitions (maps.ts).
   * Example: "main" for the main map or "debug" for the debug map.
   * Parameters can also be specified for certain maps, separated by colons (e.g. singleObstacle:rock).
   */
  map:
    | string
    | {
        /**
         * A list of maps to be switched between.
         *
         * @minItems 1
         */
        rotation: [string, ...string[]];
        /**
         * A cron pattern describing how often maps should be switched between.
         */
        cron: string;
      };
  /**
   * Dynamically scale map size and other values based on player count.
   */
  mapScaleRanges?: {
    /**
     * The minimum number of players this range applies to, inclusive.
     */
    minPlayers: number;
    /**
     * The maximum number of players this range applies to, inclusive.
     */
    maxPlayers: number;
    /**
     * The scale factor to use for the map.
     */
    scale: number;
    /**
     * The maximum number of major buildings to allow to spawn.
     */
    maxMajorBuildings?: number;
    /**
     * The window of time after a game is started during which players are allowed to join, in seconds.
     */
    gameSpawnWindow?: number;
  }[];
  /**
   * The team mode (solo, duo, or squad), or a schedule to switch between team modes.
   */
  teamMode:
    | ("solo" | "duo" | "squad")
    | {
        /**
         * A list of team modes to be switched between.
         *
         * @minItems 1
         */
        rotation: ["solo" | "duo" | "squad", ...("solo" | "duo" | "squad")[]];
        /**
         * A cron pattern describing how often team modes should be switched between.
         */
        cron: string;
      };
  /**
   * Options for player spawning. See the description of the "mode" property for more details.
   */
  spawn?: {
    /**
     * There are three spawn modes: "default", "random", and "fixed".
     * "default" uses the spawn options specified in the map definition, falling back to "random" if no options are specified.
     * "random" spawns players randomly, spreading them out as much as possible.
     * "fixed" spawns players exactly at the specified position, or randomly within a circle with the specified radius. If no position is specified, it defaults to the center of the map.
     */
    mode: "default" | "random" | "fixed";
    /**
     * The position to spawn players at.
     * The first, second, and third items in the array represent the X, Y, and Z coordinates respectively, with the Z coordinate being optional (defaulting to the ground layer).
     * If a "radius" is not specified, players are spawned at this exact position.
     * If a "radius" is specified, players are spawned randomly within a circle centered at this position.
     * This property is ignored unless the spawn mode is set to "fixed".
     *
     * @minItems 2
     * @maxItems 3
     */
    position?: [number, number] | [number, number, number];
    /**
     * The radius of the circle within which players will be spawned randomly.
     * This property is ignored unless the spawn mode is set to "fixed".
     */
    radius?: number;
  };
  /**
   * Options for the gas.
   */
  gas?: {
    /**
     * If set to true, the gas will be disabled.
     */
    disabled?: boolean;
    /**
     * Forces the gas to shrink to a specific position. If set to true, it will shrink to the center of the map.
     *
     * @minItems 2
     * @maxItems 2
     */
    forcePosition?: [number, number] | boolean;
    /**
     * Forces each stage of the gas to be a specific duration, in seconds.
     */
    forceDuration?: number;
  };
  /**
   * The minimum number of teams (players in solo) that must join a game for it to start.
   */
  minTeamsToStart?: number;
  /**
   * The maximum number of players that can join a game.
   */
  maxPlayersPerGame: number;
  /**
   * The maximum number of concurrent games.
   */
  maxGames: number;
  /**
   * The number of game ticks that occur per second. Overrides the value of GameConstants.tps.
   */
  tps?: number;
  /**
   * List of plugins to load. Each item must correspond to the name of a file in server/src/plugins, minus the extension.
   */
  plugins?: string[];
  /**
   * Options for the API server.
   */
  apiServer?: {
    url: string;
    apiKey: string;
    reportWebhookUrl?: string;
  };
  /**
   * If this option is specified, the given HTTP header will be used to determine IP addresses.
   * If using nginx with the sample config, set it to "X-Real-IP".
   * If using Cloudflare, set it to "CF-Connecting-IP".
   * If not using a reverse proxy, this option should be omitted.
   */
  ipHeader?: string;
  /**
   * Limits the number of simultaneous connections from each IP address.
   */
  maxSimultaneousConnections?: number;
  /**
   * Limits the number of join attempts ("count") within the given duration ("duration", in milliseconds) from each IP address.
   */
  maxJoinAttempts?: {
    /**
     * The number of join attempts to allow within the given "duration".
     */
    count: number;
    /**
     * The amount of time (in milliseconds) during which the given number of join attempts ("count") should be allowed.
     */
    duration: number;
  };
  /**
   * Limits the number of custom teams that can be created simultaneously by any one IP address.
   */
  maxCustomTeams?: number;
  /**
   * List of regexes to test usernames against. If a player's username matches one of the regexes in this array, it will be replaced with the default username.
   */
  usernameFilters?: string[];
  /**
   * Roles. Each role has a different password and can give exclusive skins and cheats.
   * If "isDev" is set to true for a role, cheats will be enabled for that role.
   * To use roles, add "?password=PASSWORD&role=ROLE" (minus quotes) to the URL, for example: http://127.0.0.1:3000/?password=developr&role=developr
   * Dev cheats can be enabled using the "lobbyClearing" option (http://127.0.0.1:3000/?password=developr&role=developr&lobbyClearing=true), but the server must also have it enabled (thru the "allowLobbyClearing" property).
   */
  roles?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      password: string;
      isDev?: boolean;
      [k: string]: unknown;
    };
  };
  /**
   * Determines whether dev cheats should be allowed.
   */
  allowLobbyClearing?: boolean;
  /**
   * If true, allows things like scopes and flares to work in buildings.
   */
  disableBuildingCheck?: boolean;
}
